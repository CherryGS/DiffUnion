//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::{entity::prelude::*, FromJsonQueryResult};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult, ts_rs::TS)]
pub struct CivitaiJson {
    series: Option<String>,
    version: Option<String>,
    trigger: Option<Vec<String>>,
}

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "main"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, ts_rs :: TS,
)]
#[ts(export)]
pub struct Model {
    pub pk: i32,
    pub blake3: Vec<u8>,
    pub path: String,
    pub sha256: Option<Vec<u8>>,
    pub name: Option<String>,
    pub tags: Option<String>,
    pub static_tags: Option<String>,
    pub note: Option<String>,
    pub create_time: u64,
    pub update_time: u64,
    pub civitai: Option<CivitaiJson>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Pk,
    Blake3,
    Path,
    Sha256,
    Name,
    Tags,
    StaticTags,
    Note,
    CreateTime,
    UpdateTime,
    Civitai,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Pk,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Pk => ColumnType::Integer.def().unique(),
            Self::Blake3 => ColumnType::Blob.def().unique().indexed(),
            Self::Path => ColumnType::Text.def(),
            Self::Sha256 => ColumnType::Blob.def().null(),
            Self::Name => ColumnType::Text.def().null(),
            Self::Tags => ColumnType::Text.def().null(),
            Self::StaticTags => ColumnType::Text.def().null(),
            Self::Note => ColumnType::Text.def().null(),
            Self::CreateTime => ColumnType::Integer.def().indexed(),
            Self::UpdateTime => ColumnType::Integer.def().indexed(),
            Self::Civitai => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
